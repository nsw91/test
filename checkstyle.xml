<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Puppy Crawl//DTD Check Configuration 1.2//EN" "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">

    <property name="charset" value="UTF-8"/>
    <property name="severity" value="warning"/>

    <!-- 检查文件的最大行长度 -->
    <module name="LineLength">
        <property name="max" value="120"/>
    </module>
    <!--除非特别说明，否则检查代码的位置都要放在 TreeWalker 这个结点下面。-->
    <module name="TreeWalker">


        <!--   =========================PACKAGE IMPORT START==============================    -->
        <!--
        ImportControl
        控制可import的包。在一个较大的project可限制使用过多的第三方包，
        -->

        <!-- Checks for imports    -->
        <!-- 必须导入类的完整路径，即不能使用*导入所需的类 -->
        <module name="AvoidStarImport"/>

        <!--检查是否有静态import。比如是否导入了java.lang包中的内容。-->
        <module name="AvoidStaticImport"/>

        <!-- 检查是否从非法的包中导入了类 illegalPkgs: 定义非法的包名称-->
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->

        <!-- 检查是否导入了不必显示导入的类-->
        <module name="RedundantImport"/>

        <!-- 检查是否导入的包没有使用-->
        <module name="UnusedImports"/>


        <!--导入顺序这里我们不做要求，导入顺序有android studio 的自动排版，可以做到阅读的便利性
            <module name="ImportOrder"></module>-->

        <!--   =========================PACKAGE IMPORT END  ==============================    -->

        <!--   =========================JAVA DOC START=====================================================================================================    -->
        <!--
        JavadocPackage
        检查每个java package中是否有java注释文件，默认是允许一个package-info.java，也可以通过allowLegacy属性配置允许package.html。

        JavadocType
        检查类和接口的javadoc。默认不检查author 和version tags。

        JavadocMethod
        检查方法和构造函数的javadoc。默认不检查未使用的异常抛出。

        JavadocVariable
        检查变量的javadoc。

        JavadocStyle
        检查javadoc的格式。比如：javadoc的第一行是否以句号结束，javadoc除了tags外是否有description，检查javadoc中的html格式。

        WriteTag
        输出javadoc中的tag。
        -->

        <!-- 检查类和接口的javadoc 默认不检查author 和version tags
            authorFormat: 检查author标签的格式
            versionFormat: 检查version标签的格式
            scope: 可以检查的类的范围，例如：public只能检查public修饰的类，private可以检查所有的类
            excludeScope: 不能检查的类的范围，例如：public，public的类将不被检查，但访问权限小于public的类仍然会检查，其他的权限以此类推
            tokens: 该属性适用的类型，例如：CLASS_DEF,INTERFACE_DEF -->
        <module name="JavadocType">
            <!--  <property name="authorFormat" value="\S"/>-->
            <property name="scope" value="protected"/>
            <property name="tokens" value="CLASS_DEF,INTERFACE_DEF"/>
        </module>

        <!-- 检查方法的javadoc的注释
                scope: 可以检查的方法的范围，例如：public只能检查public修饰的方法，private可以检查所有的方法
                allowMissingParamTags: 是否忽略对参数注释的检查
                allowMissingThrowsTags: 是否忽略对throws注释的检查
                allowMissingReturnTag: 是否忽略对return注释的检查 -->
<!--        <module name="JavadocMethod">-->
<!--            <property name="scope" value="private"/>-->
<!--            <property name="allowMissingParamTags" value="false"/>-->
<!--            <property name="allowMissingThrowsTags" value="false"/>-->
<!--            <property name="allowMissingReturnTag" value="false"/>-->
<!--            <property name="tokens" value="METHOD_DEF"/>-->
<!--            <property name="allowUndeclaredRTE" value="true"/>-->
<!--            <property name="allowThrowsTagsForSubclasses" value="true"/>-->
<!--            &lt;!&ndash;允许get set 方法没有注释&ndash;&gt;-->
<!--            <property name="allowMissingPropertyJavadoc" value="true"/>-->
<!--        </module>-->

        <!-- 检查类变量的注释
                scope: 检查变量的范围，例如：public只能检查public修饰的变量，private可以检查所有的变量 -->
        <module name="JavadocVariable">
            <property name="scope" value="private"/>
        </module>

        <!--javadoc 标签缩进  默认4空格-->
        <!--  <module name="JavadocTagContinuationIndentation" />-->

        <!--   =========================JAVA DOC END  ==============================    -->



        <!--   =========================NAMING CONVENTIONS START==============================    -->

        <!-- Checks for Naming Conventions.   命名规范   -->
        <!-- local, final variables, including catch parameters 全部大写 -->
        <module name="LocalFinalVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)"/>
        </module>

        <!-- local, non-final variables, including catch parameters 使用小驼峰-->
        <module name="LocalVariableName"/>

        <!-- 静态变量命名  不能有小写字母，长度(0,29) -->
        <module name="StaticVariableName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)"/>
        </module>

        <!-- 包命名  只可以使用小写字母  -->
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
        </module>

        <!-- 类，接口命名  大写字母开头，长度(0,29) 大驼峰 -->
        <module name="TypeName">
            <property name="format" value="(^[A-Z][a-zA-Z0-9]{0,29}$)" />
        </module>

        <!-- 方法命名  小写字母开头，长度(0,29)  小驼峰-->
        <module name="MethodName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)" />
        </module>

        <!-- 成员变量命名  小写字母开头，长度(0,29) 小驼峰 ，建议使用 mFiled 的格式 -->
        <module name="MemberName">
            <property name="format" value="(^[a-z][a-zA-Z0-9]{0,29}$)" />
        </module>

        <!-- 参数命名  小写字母开头，长度(0,29) 小驼峰 -->
        <module name="ParameterName">
            <property name="format" value="(^[a-z][a-zA-Z0-9_]{0,29}$)" />
        </module>

        <!-- 常量命名  不能有小写字母，长度(0,29) -->
        <module name="ConstantName">
            <property name="format" value="(^[A-Z0-9_]{0,29}$)" />
        </module>

        <!--   =========================NAMING CONVENTIONS END  ==============================    -->


        <!--   =========================SIZE VIOLATIONS START==============================    -->


        <!-- Checks for long methods and constructors. max default 150行. max=300 设置长度300 -->
        <module name="MethodLength">
            <property name="max" value="300"/>
        </module>

        <!-- Checks the number of parameters of a method or constructor. 最大7个. -->
        <module name="ParameterNumber">
            <property name="max" value="7"/>
        </module>

        <!--   =========================SIZE VIOLATIONS END  ==============================    -->


        <!--   =========================WHITESPACE START==============================    -->
        <!--
        检查周围的空白。
        <module name="GenericWhitespace"/>
        -->
        <!--
        EmptyForInitializerPad
        检查空的初始化位置的空白。比如for循环中的初始化。
        -->
        <!--
        EmptyForIteratorPad
        检查空的迭代位置的空白。
        -->
        <!--
        MethodParamPad
        检查方法签名之前的空白。
        -->
        <!--
        NoWhitespaceAfter
        检查分隔符后的空白。
        -->
        <module name="NoWhitespaceAfter"/>
        <!--
        NoWhitespaceBefore
        检查分隔符前的空白。
        -->
        <!--
        OperatorWrap
        检查操作符的空白规则。
        -->
        <!--
        ParenPad
        检查圆括号的空白规则。
        -->
        <!--
        TypecaseParenPad
        检查强制转型的圆括号的空白规则。
        -->
        <!--
        TabCharacter
        检查是否有Tab字符（’"t’）。
        -->
        <!--
        WhitespaceAfter
        检查分隔符是否在空白之后。
        -->
        <!--
        WhitespaceAround
        检查分隔符周围是否有空白。
        -->

        <!--   =========================WHITESPACE END  ==============================    -->

        <!--   =========================BLOCK START==============================    -->
        <!--
        EmptyBlock
        检查空的代码块。

        AvoidNestedBlocks
        检查不需要的嵌套’{}’
        -->
        <!-- 代码缩进   -->
        <module name="Indentation">
        </module>

        <!--option: 定义左大括号'{'显示位置，eol在同一行显示，nl在下一行显示  左大括号同行，右大括号另起一行
          maxLineLength: 大括号'{'所在行行最多容纳的字符数
          tokens: 该属性适用的类型，例：CLASS_DEF,INTERFACE_DEF,METHOD_DEF,CTOR_DEF -->
        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>
        <!-- Checks the placement of right curly braces ('}') for  else, try, and catch tokens. The policy to verify is specified using property  option.
          option: 右大括号是否单独一行显示
          tokens: 定义检查的类型  -->
        <module name="RightCurly">
            <property name="option" value="alone"/>
        </module>

        <!-- NeedBraces 检查是否应该使用括号的地方没有加括号
          tokens: 定义检查的类型 -->
        <module name="NeedBraces"/>

        <!--   =========================BLOCK END  ==============================    -->


        <!--   ========================= java编码检查  ==============================    -->

        <!-- 检查在重写了equals方法后是否重写了hashCode方法 -->
        <module name="EqualsHashCode"/>

        <!-- Checks for redundant exceptions declared in throws clause such as duplicates, unchecked exceptions or subclasses of another declared exception.
          检查是否抛出了多余的异常
        <module name="RedundantThrows">
            <property name="logLoadErrors" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>
        -->

        <!--  Checks for overly complicated boolean expressions. Currently finds code like  if (b == true), b || true, !false, etc.
          检查boolean值是否冗余的地方
          Rationale: Complex boolean logic makes code hard to understand and maintain. -->
        <module name="SimplifyBooleanExpression"/>

        <!--  Checks for overly complicated boolean return statements. For example the following code
           检查是否存在过度复杂的boolean返回值
           if (valid())
              return false;
           else
              return true;
           could be written as
              return !valid();
           The Idea for this Check has been shamelessly stolen from the equivalent PMD rule. -->
        <module name="SimplifyBooleanReturn"/>

        <!-- Checks that a class which has only private constructors is declared as final.只有私有构造器的类必须声明为final-->
        <module name="FinalClass"/>

        <!--  Checks visibility of class members. Only static final members may be public; other class members must be private unless property protectedAllowed or packageAllowed is set.
          检查class成员属性可见性。只有static final 修饰的成员是可以public的。其他的成员属性必需是private的，除非属性protectedAllowed或者packageAllowed设置了true.
           Public members are not flagged if the name matches the public member regular expression (contains "^serialVersionUID$" by default). Note: Checkstyle 2 used to include "^f[A-Z][a-zA-Z0-9]*$" in the default pattern to allow CMP for EJB 1.1 with the default settings. With EJB 2.0 it is not longer necessary to have public access for persistent fields, hence the default has been changed.
           Rationale: Enforce encapsulation. 强制封装 -->
        <module name="VisibilityModifier"/>

        <!-- 每一行只能定义一个变量 -->
        <module name="MultipleVariableDeclarations">
        </module>

        <!-- Checks the style of array type definitions. Some like Java-style: public static void main(String[] args) and some like C-style: public static void main(String args[])
          检查再定义数组时，采用java风格还是c风格，例如：int[] num是java风格，int num[]是c风格。默认是java风格-->
        <module name="ArrayTypeStyle">
        </module>

        <!-- Checks that there are no "magic numbers", where a magic number is a numeric literal that is not defined as a constant.
		By default, -1, 0, 1, and 2 are not considered to be magic numbers.-->
        <module name="MagicNumber">
        </module>

        <!-- A check for TODO: comments. Actually it is a generic regular expression matcher on Java comments. To check for other patterns in Java comments, set property format.
           检查是否存在TODO（待处理） TODO是javaIDE自动生成的。一般代码写完后要去掉。
         -->
        <module name="TodoComment"/>

        <!--  Checks that long constants are defined with an upper ell. That is ' L' and not 'l'. This is in accordance to the Java Language Specification,  Section 3.10.1.
          检查是否在long类型是否定义了大写的L.字母小写l和数字1（一）很相似。
          looks a lot like 1. -->
        <module name="UpperEll"/>

        <!--  Checks that switch statement has "default" clause. 检查switch语句是否有‘default’从句
           Rationale: It's usually a good idea to introduce a default case in every switch statement.
           Even if the developer is sure that all currently possible cases are covered, this should be expressed in the default branch,
            e.g. by using an assertion. This way the code is protected aginst later changes, e.g. introduction of new types in an enumeration type. -->
        <module name="MissingSwitchDefault"/>
        <!--检查default的clause是否在switch代码段的最后。 -->
        <module name="DefaultComesLast"/>


        <!--检查switch中case后是否加入了跳出语句，例如：return、break、throw、continue -->
        <module name="FallThrough"/>

        <!-- ModifierOrder 检查修饰符的顺序，默认是 public,protected,private,abstract,static,final,transient,volatile,synchronized,native -->
        <module name="ModifierOrder">
        </module>

        <!-- 检查是否有多余的修饰符，例如：接口中的方法不必使用public、abstract修饰  -->
        <module name="RedundantModifier">
        </module>

        <!--- 字符串比较必须使用 equals() -->
        <module name="StringLiteralEquality">
        </module>

        <!-- if-else嵌套语句个数 最多4层 -->
        <module name="NestedIfDepth">
            <property name="max" value="3"/>
        </module>

        <!-- try-catch 嵌套语句个数 最多2层 -->
        <module name="NestedTryDepth">
            <property name="max" value="2"/>
        </module>


        <!--检查一个表达式中  &&, ||, &, | ， ^ 的最大允许个数-->
        <module name="BooleanExpressionComplexity">
            <property name="max" value="7" />
        </module>


        <!--圈复杂度检查，即执行到最深层代码需要判断的条件数，多见于多层嵌套的if-else ，default 10-->
        <module name="CyclomaticComplexity" />

        <!--检查是否有定义finalize()。-->
        <module name="NoFinalizer" />

        <!--  其他检查
        ArrayTrailingComma
        检查数组初始化是否以逗号结束。

        AvoidInlineConditionals
        检查inline的条件操作。

        CovariantEquals
        检查类是否覆盖了equals(java.lang.Object)。

        DoubleCheckedLocking
        检查DCL的问题。

        EmptyStatement
        检查空的代码段。

        EqualsAvoidNull
        检查一个可能为null的字符串是否在equals()比较的左边。

        FinalLocalVariable
        检查未改变过的局部变量是否声明为final。

        HiddenField
        检查局部变量或参数是否隐藏了类中的变量。

        IllegalToken
        检查非法的分隔符。

        IllegalTokenText
        检查非法的分隔符的下个字符。

        InnerAssignment
        检查子表达式中是否有赋值操作。

        ModifiedControlVariable
        检查循环控制的变量是否在代码块中被修改。

        StringLiteralEquality
        检查字符串是否有用= =或!=进行操作。

        NestedIfDepth
        检查嵌套的层次深度。

        NestedTryDepth
        检查try的层次深度。

        NoClone
        检查是否覆盖了clone()。

        SuperClone
        检查覆盖的clone()是否有调用super.clone()。

        SuperFinalize
        检查覆盖的finalize()是否有调用super.finalize()。

        IllegalCatch
        检查是否catch了不能接受的错误。

        IllegalThrows
        检查是否抛出了未声明的异常。

        PackageDeclaration
        检查类中是否有声明package。

        JUnitTestCase
        确保setUp(), tearDown()方法签名的正确性。

        ReturnCount
        限制return代码段的数量。

        IllegalType
        检查未使用过的类。

        DeclarationOrder
        检查类和接口中的声明顺序。

        ParameterAssignment
        检查不允许的参数赋值。

        ExplicitInitialization
        检查类和对象成员是否初始化为默认值。

        MissingCtor
        检查类依赖。

        FallThrough
        检查switch代码的case中是否缺少break，return，throw和continue。

        MultipleStringLiterals
        检查一个文件中是否有多次出现的字符串。

        RequireThis
        检查代码中是否有“this.”。

        UnnecessaryParentheses
        检查是否有使用不需要的圆括号。

        InterfaceIsType
        检查接口是否仅定义类型。

        DesignForExension
        检查类是否为扩展设计。

        MutableException
        确保异常是不可变的。

        ThrowsCount
        限制抛出异常的数量。

        StrictDuplicateCode
        严格检查重复代码。

        GenericIllegalRegexp
        正则表达式的模式检查。

        NewlineAtEndOfFile
        检查文件是否以一个空行结束。

        Translation
        检查property文件中是否有相同的key。

        UncommentedMain
        检查是否有未注释的main方法。

        ArrayTypeStyle
        检查数组类型定义的样式。

        FinalParameters
        检查方法名、构造函数、catch块的参数是否是final的。

        Indentation
        检查代码中正确的缩进。

        TrailingComment
        确保是否要代码行注释。

        RequiredRegexp
        确保一个指定的正则表达式的规则已经存在代码中。
        -->
    </module>

</module>